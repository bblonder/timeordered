data(ants)#
allindivs <- c(union(ants$VertexFrom, ants$VertexTo), "NULL1", "NULL2")#
g <- generatetonetwork(ants, allindivs)
generatevertexedgelist <-#
function(raw, allindivs)#
{	#
	if (length(allindivs) > length(unique(allindivs)))#
	{#
		stop("Allindivs is not a list of unique objects - check for duplicates.")	#
	}#
	noninteractors <- setdiff(as.character(allindivs), union(as.character(raw$VertexFrom), as.character(raw$VertexTo)))#
	DatasetStartTime <- min(c(raw$TimeStart, raw$TimeStop),na.rm=TRUE)#
	DatasetStopTime <- max(c(raw$TimeStart, raw$TimeStop),na.rm=TRUE)#
	startingevents <- data.frame(TimeVertexFrom=paste(raw$VertexFrom, raw$TimeStart), TimeVertexTo=paste(raw$VertexTo, raw$TimeStart),VertexFrom=raw$VertexFrom, VertexTo=raw$VertexTo, TimeStart=raw$TimeStart, TimeStop=raw$TimeStart, TimeCost=0, HopCost=1)#
	stoppingevents <- data.frame(TimeVertexFrom=paste(raw$VertexFrom, raw$TimeStop), TimeVertexTo=paste(raw$VertexTo, raw$TimeStop), VertexFrom=raw$VertexFrom, VertexTo=raw$VertexTo, TimeStart=raw$TimeStop, TimeStop=raw$TimeStop, TimeCost=0, HopCost=1)#
	nodepoints <- rbind(data.frame(Vertex=raw$VertexFrom, Time=raw$TimeStart), data.frame(Vertex=raw$VertexFrom, Time=raw$TimeStop), data.frame(Vertex=raw$VertexTo, Time=raw$TimeStart), data.frame(Vertex=raw$VertexTo, Time=raw$TimeStop))#
	selflist <- by(nodepoints, nodepoints$Vertex, function(x) { timelist <- unique(c(DatasetStartTime, sort(x$Time), DatasetStopTime)); return(data.frame(TimeVertexFrom=paste(x$Vertex[1], head(timelist,-1)), TimeVertexTo=paste(x$Vertex[1], tail(timelist,-1)), VertexFrom=x$Vertex[1], VertexTo=x$Vertex[1], TimeStart=head(timelist,-1), TimeStop=tail(timelist,-1), TimeCost=diff(timelist), HopCost=0   )) })#
	finaleventlist <- rbind(startingevents, stoppingevents)#
	#finalnames <- names(finaleventlist)#
	selflistall <- do.call("rbind.fill", selflist)#
	finaleventlist <- rbind(finaleventlist, selflistall)#
	#for (i in 1:length(selflist))#
	#{#
	#	tempdf <- selflist[[i]]#
#		print(tempdf)#
		#names(tempdf) <- finalnames#
#		finaleventlist <- rbind(finaleventlist, tempdf)#
#	}#
	# also add the non-interactors#
	if (length(noninteractors) > 0)#
	{#
		nonlist <- data.frame(TimeVertexFrom=paste(noninteractors, DatasetStartTime),TimeVertexTo=paste(noninteractors, DatasetStopTime), VertexFrom=noninteractors, VertexTo=noninteractors, TimeStart=DatasetStartTime, TimeStop=DatasetStopTime, TimeCost=(DatasetStopTime-DatasetStartTime), HopCost=0)#
		finaleventlist <- rbind(finaleventlist, nonlist)#
	}#
	finaleventlist$TimeVertexFrom <- as.vector(finaleventlist$TimeVertexFrom)#
	finaleventlist$TimeVertexTo <- as.vector(finaleventlist$TimeVertexTo)#
	finaleventlist$VertexFrom <- as.vector(finaleventlist$VertexFrom)#
	finaleventlist$VertexTo <- as.vector(finaleventlist$VertexTo)#
	factorlist <- factor(unique(c(finaleventlist$TimeVertexFrom, finaleventlist$TimeVertexTo)))#
	finaleventlist$TimeVertexFrom <- factor(as.vector(finaleventlist$TimeVertexFrom), levels=factorlist)#
	finaleventlist$TimeVertexTo <- factor(as.vector(finaleventlist$TimeVertexTo), levels=factorlist)#
#
	knownvertexlist <- data.frame(Identity=paste(nodepoints$Vertex, nodepoints$Time),Name=nodepoints$Vertex, Time=nodepoints$Time)#
	startvertexlist <- data.frame(Identity=paste(unique(nodepoints$Vertex),DatasetStartTime),Name=unique(nodepoints$Vertex),Time=DatasetStartTime)#
	stopvertexlist <- data.frame(Identity=paste(unique(nodepoints$Vertex),DatasetStopTime),Name=unique(nodepoints$Vertex),Time=DatasetStopTime)#
	tempoutputvertexlist <- rbind(knownvertexlist, startvertexlist, stopvertexlist)#
	if (length(noninteractors) > 0)#
	{#
		nonvertexstartlist <- data.frame(Identity=paste(noninteractors, DatasetStartTime),Name=noninteractors,Time=DatasetStartTime)#
		nonvertexstoplist <- data.frame(Identity=paste(noninteractors, DatasetStopTime),Name=noninteractors,Time=DatasetStopTime)	#
		tempoutputvertexlist <- rbind(tempoutputvertexlist, nonvertexstartlist, nonvertexstoplist)#
	}#
	finalvertexlist <- unique(tempoutputvertexlist)#
#
	return(list(edgelist=finaleventlist,vertexlist=finalvertexlist))#
}
generatetonetwork <-#
function(raw, allindivs=union(raw$VertexFrom, raw$VertexTo))#
{#
	vel <- generatetonetworkfromvel(generatevertexedgelist(raw, allindivs))#
	return(vel)#
}
data(ants)#
allindivs <- c(union(ants$VertexFrom, ants$VertexTo), "NULL1", "NULL2")#
g <- generatetonetwork(ants, allindivs)
source('../data/ants.rda')
data('../data/ants.rda')
load('../data/ants.rda')
ants
data(ants)#
allindivs <- c(union(ants$VertexFrom, ants$VertexTo), "NULL1", "NULL2")#
g <- generatetonetwork(ants, allindivs)
generatetonetworkfromvel <-#
function(vel)#
{#
	g <- graph.data.frame(vel$edgelist, directed=TRUE, vertices=vel$vertexlist)#
	return(g)#
}
data(ants)#
allindivs <- c(union(ants$VertexFrom, ants$VertexTo), "NULL1", "NULL2")#
g <- generatetonetwork(ants, allindivs)
require(igraph)
data(ants)#
allindivs <- c(union(ants$VertexFrom, ants$VertexTo), "NULL1", "NULL2")#
g <- generatetonetwork(ants, allindivs)
require(plyr)
data(ants)#
allindivs <- c(union(ants$VertexFrom, ants$VertexTo), "NULL1", "NULL2")#
g <- generatetonetwork(ants, allindivs)
g
plot(g)
g
summary(g)
plottonet <-#
function(g,path=NULL,edgecolor="gray",edgehighlightcolor="red",vertex.size=0.01,edge.arrow.size=0.1,edge.width=0.2,vertex.color=NA,vertex.label.cex=0.1,vertex.frame.color=NA,vertex.label.color="black")#
{#
	E(g)$color=edgecolor#
	if (length(path) > 0)#
	{#
		E(g, path=path)$color=edgehighlightcolor#
	}#
	names <- V(g)$Name#
	names[V(g)$Time > min(V(g)$Time)] <- NA#
#
	plot(g, layout=cbind(as.numeric(factor(V(g)$Name)), V(g)$Time), vertex.label=names,vertex.size=vertex.size,edge.arrow.size=edge.arrow.size,edge.width=edge.width, 	vertex.color=vertex.color,vertex.label.cex=vertex.label.cex,vertex.frame.color=vertex.frame.color,vertex.label.color=vertex.label.color,vertex.label.family="Helvetica")#
}
plottonet(g)
ta <- genergeneratetimeaggregatednetwork <-#
function(g, starttime, stoptime)#
{#
	sg <- subgraph(g, V(g)[Time >= starttime & Time < stoptime])#
#
	newedgelist <- data.frame(VertexFrom=E(sg)$VertexFrom,VertexTo=E(sg)$VertexTo,stringsAsFactors=FALSE)#
	newedgelist <- newedgelist[newedgelist[,1] != newedgelist[,2],]#
	newedgelist$EdgePair <- as.numeric(factor(paste(newedgelist$VertexFrom, 	newedgelist$VertexTo)))#
	tabcounts <- tabulate(newedgelist$EdgePair)#
	newedgelist$Count <- tabcounts[newedgelist$EdgePair]#
	newedgelist$weight <- newedgelist$Count#
	uniqueedgelist <- unique(newedgelist)#
	uniqueedgelist <- uniqueedgelist[,c("VertexFrom","VertexTo","weight","Count")]#
	allvertices <- as.data.frame(unique(V(g)$Name))#
	timeaggregatednetwork <- graph.data.frame(d=uniqueedgelist, vertices=allvertices)#
#
	return(timeaggregatednetwork)#
}
generatetimeaggregatednetwork <-#
function(g, starttime, stoptime)#
{#
	sg <- subgraph(g, V(g)[Time >= starttime & Time < stoptime])#
#
	newedgelist <- data.frame(VertexFrom=E(sg)$VertexFrom,VertexTo=E(sg)$VertexTo,stringsAsFactors=FALSE)#
	newedgelist <- newedgelist[newedgelist[,1] != newedgelist[,2],]#
	newedgelist$EdgePair <- as.numeric(factor(paste(newedgelist$VertexFrom, 	newedgelist$VertexTo)))#
	tabcounts <- tabulate(newedgelist$EdgePair)#
	newedgelist$Count <- tabcounts[newedgelist$EdgePair]#
	newedgelist$weight <- newedgelist$Count#
	uniqueedgelist <- unique(newedgelist)#
	uniqueedgelist <- uniqueedgelist[,c("VertexFrom","VertexTo","weight","Count")]#
	allvertices <- as.data.frame(unique(V(g)$Name))#
	timeaggregatednetwork <- graph.data.frame(d=uniqueedgelist, vertices=allvertices)#
#
	return(timeaggregatednetwork)#
}
ta <- generatetimeaggregatednetwork(g, 0, 100)
? igraph_induced_subgraph
library(igraph)
? igraph_induced_subgraph
?igraph_induced_subgraph
?subgraph
generatetimeaggregatednetwork <-#
function(g, starttime, stoptime)#
{#
	sg <- induced.subgraph(g, V(g)[Time >= starttime & Time < stoptime])#
#
	newedgelist <- data.frame(VertexFrom=E(sg)$VertexFrom,VertexTo=E(sg)$VertexTo,stringsAsFactors=FALSE)#
	newedgelist <- newedgelist[newedgelist[,1] != newedgelist[,2],]#
	newedgelist$EdgePair <- as.numeric(factor(paste(newedgelist$VertexFrom, 	newedgelist$VertexTo)))#
	tabcounts <- tabulate(newedgelist$EdgePair)#
	newedgelist$Count <- tabcounts[newedgelist$EdgePair]#
	newedgelist$weight <- newedgelist$Count#
	uniqueedgelist <- unique(newedgelist)#
	uniqueedgelist <- uniqueedgelist[,c("VertexFrom","VertexTo","weight","Count")]#
	allvertices <- as.data.frame(unique(V(g)$Name))#
	timeaggregatednetwork <- graph.data.frame(d=uniqueedgelist, vertices=allvertices)#
#
	return(timeaggregatednetwork)#
}
ta <- generatetimeaggregatednetwork(g, 0, 100)
ta
plot(ta)
plot(ta,layout=layout.circle)
plottanet <-#
function(timeaggregatednetwork,layout=layout.circle,vertex.label=V(timeaggregatednetwork)$name,vertex.size=0,vertex.label.cex=0.5,edge.arrow.size=0.5,edge.width=E(timeaggregatednetwork)$Count/5)#
{#
	plot(timeaggregatednetwork,layout=layout,vertex.label=vertex.label,vertex.size=vertex.size,vertex.label.cex=vertex.label.cex,edge.arrow.size=edge.arrow.size,edge.width=edge.width,vertex.label.family="Helvetica")	#
}
plottanet(ta)
allindivs <- c(union(ants$VertexFrom, ants$VertexTo), "NULL1", "NULL2")#
g <- generatetonetwork(ants, allindivs)#
td100 <- generatetimedeltas(0,1500,100)#
ns100 <- generatenetworkslices(g, td100)#
plotnetworkslices(ns100, td100)
generatetimedeltas <-#
function(starttime, stoptime, delta)#
{#
	ts <- seq(starttime,stoptime,by=delta)#
	return(cbind(head(ts,-1),tail(ts,-1)))	#
}
generatenetworkslices <-#
function(g, timedeltas)#
{#
	return(apply(timedeltas, 1, function(x) { generatetimeaggregatednetwork(g, x[1],x[2]) }))#
}
plotnetworkslices <-#
function(slices, timedeltas)#
{#
	timestrings <- paste(timedeltas[,1]," - ", timedeltas[,2])#
	par(mfrow=c(ceiling(sqrt(length(slices))),ceiling(sqrt(length(slices)))))#
	par(mar=c(1,1,1,1))#
	for (i in 1:length(slices)) #
	{ #
		plottanet(slices[[i]])#
		text(0,0,timestrings[i]) #
	}#
#
}
td100 <- generatetimedeltas(0,1500,100)#
ns100 <- generatenetworkslices(g, td100)#
plotnetworkslices(ns100, td100)
V(g)
V(g)$name
V(g)[0]
V(g)[1]
V(g)$name[1]
shp <- shortesthoppath(g, "WBGG", 927, "GYGG", 1423)#
plottonet(g, shp)#
title(paste(length(unique(shp$Name))," hops"))
shortesthoppath <-#
function(g, startvertexname, startvertextime, stopvertexname, stopvertextime)#
{#
	if (length(startvertexname) != 1 | length(stopvertexname) != 1)#
	{#
		stop("must provide single startvertex and stop vertex")	#
	}#
	startvertex <- V(g)[Name==startvertexname & Time==startvertextime]#
	stopvertex <- V(g)[Name==stopvertexname & Time==stopvertextime]#
	vertices <- get.shortest.paths(g, startvertex, stopvertex, mode="out", weights=E(g)$HopCost)#
	return(V(g)[vertices[[1]] ])#
}
shp <- shortesthoppath(g, "WBGG", 927, "GYGG", 1423)#
plottonet(g, shp)#
title(paste(length(unique(shp$Name))," hops"))
shp
?head
head(letters)
head(letters, -1)
shortesttimepath <-#
function(g, startvertexname, startvertextime, stopvertexname)#
{#
	if (length(startvertexname) != 1 | length(stopvertexname) != 1)#
	{#
		stop("must provide single startvertex and stop vertex")	#
	}#
	startvertex <- V(g)[Name==startvertexname & Time==startvertextime]#
	stopvertices <- V(g)[Name==stopvertexname & Time>=startvertextime]	#
	paths <- get.shortest.paths(g, startvertex, stopvertices, mode="out", weights=E(g)$TimeCost)#
	shortestpath  <- paths[[which.min(lapply(paths, function(x) { tail(V(g)[x]$Time,1) })) ]]#
	return(V(g)[shortestpath])#
}
g <- generatetonetwork(ants, allindivs)#
stp <- shortesttimepath(g, "WBGG", 927, "Q")#
plottonet(g, stp)#
title(paste(diff(range(stp$Time)), "time elapsed"))
stp
?plottonet
plottonet
V(g)
V(g)$name
?plottonet
plottonet
V(g)$Name
plottonet
factor(V(g)$Name)
plottonet
stp
stp$Time
?plot.igraph
V(g)$Time > min(V(g)$Time)
plottonet
V(g)
V(g)$Name
V(g)$name
cbind(V(g)$Name, V(g)$name)
cbind(V(g)$Name, V(g)$name, V(g)$Time > min(V(g)$Time))
plottonet
plottonet(induced_subgraph(g, V(g)$Time < 100))
?subgraph
plottonet(induced.subgraph(g, V(g)$Time < 100))
stp <- shortesttimepath(sg, "GGRR", 0, "GRWG")
sg <- induced.subgraph(g, V(g)$Time < 100)#
#
stp <- shortesttimepath(sg, "GGRR", 0, "GRWG")
stp
plottonet(sg, path=stp)
stp <- shortesttimepath(sg, "GGRR", 0, "Q")#
#
plottonet(sg, path=stp)
stp <- shortesttimepath(sg, "GGRR", 0, "WRR_")#
#
plottonet(sg, path=stp)
